- Branching
- Merging
- Conflict resolution
- Undoing
- gitignore
- pull request

- Branching
============================================
What is branching?
	- is a LINE of code for
		Seprate 
			DEV
			BUG FIXING
			Enhnacment
		From Main line of Code.
----------------------------------------
Default branch 
	- Master
New Version of Git & github - Default branch - main

What is Branching Strategy
=========================
	- Bug fixing
	- Enhancement
	- Team
	- 2 Diff Geog*
https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/branching-strategies-with-tfvc?view=azure-devops
	

Types of branches in Git?
===================================
Local Branch		- Read - Write
Remote Branch		- Read Only
Temporary Branch	- Ref only

 501  git --version
  502  clear
  503  git branch
  504  ls
  505  git branch -r
  506  clear
  507  git log --oneline
  508  git checkout 28de6f5
  509  git branch -a
  510  git checkout master
  511  git branch -a

Why we have 
- Local Branch		- Read - Write
- Remote Branch		- Read Only

PUSH === 
Pull === Fetch + Merge

git push origin master

 502  git brach -a
  503  clear
  504  git branch -a
  505  git checkout remotes/origin/master
  506  ls
  507  clear
  508  git checkout master
  509  git fetch origin master
  510  cleart
  511  clear
  512  ls
  513  git checkout remotes/origin/master
  514  ls
  515  clear
  516  ls
  517  git checkout master
  518  git branch -a
  519  git merge remotes/origin/master
  520  ls
========================================================
How to create a branches?
=================================
git branch dev
git checkout -b qa
git switch -c ops

 530  git branch dev
  531  git branch -a
  532  git checkout dev
  533  git branch -a
  534  clear
  535  ls
  536  touch dev1.txt;git add --all;git commit -m"adding dev1"
  537  touch dev1.txt;git add --all;git commit -m"adding dev2"
  538  touch dev2.txt;git add --all;git commit -m"adding dev2"
  539  touch dev3.txt;git add --all;git commit -m"adding dev3"
  540  clear
  541  git log --oneline
  542  git checkout master
  543  clear
  544  git log --oneline


working with non-master branch from cloning

  552  mkdir raju
  553  git clone https://github.com/devopsschool-demo-temporary/nov-1-2021.git raju
  554  ls
  555  cd raju/
  556  clear
  557  git branch -a
  558  git checkout dev
  559  git branch -a
============================================================
HEAP is TIp of the Current branch which you have checked out.
=========================================================
Fast Forward

  572  git log --oneline
  573  git checkout -b qa
  574  clear
  575  git log --oneline
  576  touch qa1.txt;git add --all;git commit -m"adding qa1"
  577  touch qa2.txt;git add --all;git commit -m"adding qa2"
  578  clear
  579  touch qa3.txt;git add --all;git commit -m"adding qa3"
  580  git log --oneline
  581  git checkout master
  582  git log --oneline
  583  clear
  584  git merge qa
  585  git log --oneline



Recursive

 589  git log --oneline
  590  git checkout -b recurse
  591  git log --oneline
  592  clear
  593  touch recurse1.txt;git add --all;git commit -m"adding recuse1"
  594  touch recurse2.txt;git add --all;git commit -m"adding recuse2"
  595  git checkout master
  596  git log --oneline
  597  touch master1.txt;git add --all;git commit -m"adding master1"
  598  touch master2.txt;git add --all;git commit -m"adding master2"
  599  git log --oneline
  600  git checkout recurse
  601  touch recurse3.txt;git add --all;git commit -m"adding recuse3"
  602  touch recurse4.txt;git add --all;git commit -m"adding recuse4"
  603  git log --oneline
  604  git checkout master
  605  git log --oneline
  606  touch master3.txt;git add --all;git commit -m"adding master3"
  607  clear
  608  git diff recurse
  609  ls
  610  clear
  611  ls
  612  git checkout recurse
  613  ls
  614  git checkout master
  615  clear
  616  git merge recurse
  617  ls
  618  git log --oneline
  619  git log
  620  git log --oneline



Cherry-Picking
=======================================

  624  git checkout recurse
  625  touch cherry1.txt;git add --all;git commit -m"adding cherry1"
  626  touch cherry2.txt;git add --all;git commit -m"adding cherry2"
  627  touch cherry3.txt;git add --all;git commit -m"adding cherry3"
  628  touch cherry4.txt;git add --all;git commit -m"adding cherry4"
  629  touch cherry5.txt;git add --all;git commit -m"adding cherry5"
  630  clear
  631  ls
  632  git log --oneline
  633  git checkout master
  634  git cherry-pick 5719792
  635  ls
  636  git log --oneline
  637  clear
  638  git cherry-pick --help













